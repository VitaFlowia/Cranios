"""
AI Processor Service - Cr√¢nios
Processador Principal de IA para o Sistema de Automa√ß√£o
Integra√ß√£o com Arcee.ai, Supabase e processamento de m√≠dia
"""

import os
import json
import logging
import asyncio
import base64
from datetime import datetime
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
import aiohttp
import openai
from supabase import Client
import speech_recognition as sr
import pyttsx3
from PIL import Image
import cv2
import numpy as np
from io import BytesIO
import tempfile

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class AIRequest:
    """Estrutura de requisi√ß√£o para IA"""
    message: str
    context: Dict = None
    business_type: str = ""
    lead_data: Dict = None
    media_type: str = "text"  # text, audio, image, video
    media_data: bytes = None
    conversation_history: List[Dict] = None

@dataclass
class AIResponse:
    """Estrutura de resposta da IA"""
    text_response: str
    audio_response: bytes = None
    confidence_score: float = 0.0
    intent: str = ""
    entities: Dict = None
    next_action: str = ""
    requires_human: bool = False

class AIProcessor:
    """Processador Principal de IA"""
    
    def __init__(self, arcee_api_key: str, supabase_client: Client):
        self.arcee_api_key = arcee_api_key
        self.supabase = supabase_client
        self.setup_ai_services()
        self.load_training_data()
        
    def setup_ai_services(self):
        """Configura√ß√£o dos servi√ßos de IA"""
        try:
            # Configura√ß√£o Arcee.ai
            self.arcee_base_url = "https://api.arcee.ai/v1"
            self.arcee_headers = {
                "Authorization": f"Bearer {self.arcee_api_key}",
                "Content-Type": "application/json"
            }
            
            # Configura√ß√£o Speech Recognition
            self.speech_recognizer = sr.Recognizer()
            
            # Configura√ß√£o Text-to-Speech
            self.tts_engine = pyttsx3.init()
            self.tts_engine.setProperty('rate', 150)
            self.tts_engine.setProperty('volume', 0.9)
            
            # Configura√ß√£o de vozes (se dispon√≠vel)
            voices = self.tts_engine.getProperty('voices')
            if voices:
                # Procura por voz feminina em portugu√™s
                for voice in voices:
                    if 'portuguese' in voice.name.lower() or 'brasil' in voice.name.lower():
                        if 'female' in voice.name.lower() or 'ana' in voice.name.lower():
                            self.tts_engine.setProperty('voice', voice.id)
                            break
            
            logger.info("Servi√ßos de IA configurados com sucesso")
            
        except Exception as e:
            logger.error(f"Erro na configura√ß√£o dos servi√ßos de IA: {e}")
            raise
    
    def load_training_data(self):
        """Carrega dados de treinamento da IA"""
        try:
            # Carrega script da Agente Ana 2.0
            self.ana_script = self.load_ana_script()
            
            # Carrega base de conhecimento por segmento
            self.knowledge_base = self.load_knowledge_base()
            
            # Carrega t√©cnicas de persuas√£o
            self.persuasion_techniques = self.load_persuasion_techniques()
            
            logger.info("Dados de treinamento carregados com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao carregar dados de treinamento: {e}")
            raise
    
    def load_ana_script(self) -> Dict:
        """Carrega o script completo da Agente Ana 2.0"""
        return {
            "personality": {
                "name": "Ana",
                "role": "Assistente Virtual da Cr√¢nios",
                "tone": "Profissional, emp√°tica, persuasiva",
                "objective": "Fechar vendas ou agendar apresenta√ß√µes"
            },
            "opening_messages": {
                "initial": "Ol√°! Sou a Ana, assistente virtual da Cr√¢nios ü§ñüß†\nA nossa miss√£o √© uma s√≥: fazer voc√™ ganhar tempo e dinheiro, sem perder sua sanidade.\n\nPosso come√ßar te perguntando: como nos conheceu?",
                "livia_team": "Que legal! A L√≠via Team sempre fala muito bem dos profissionais do clube. Voc√™s s√£o pessoas que valorizam qualidade de vida e efici√™ncia, n√©?\n\nAjudo empres√°rios e profissionais como voc√™ a automatizar processos e ganhar MUITO mais tempo para o que realmente importa - seja para a fam√≠lia, exerc√≠cios, ou focar no que ama fazer no trabalho.",
                "referral": "Excelente! Quem te indicou? [aguarda resposta]\n\nAh, o [Nome]! Ele est√° economizando mais de 20 horas por semana desde que implementamos a automa√ß√£o. Disse que foi uma das melhores decis√µes que j√° tomou para o neg√≥cio dele.\n\nPosso te mostrar como conseguimos esses resultados?",
                "social_media": "√ìtimo! Voc√™ deve ter visto alguns dos nossos cases de sucesso, n√©?\n\nNossos clientes est√£o economizando entre 15-25 horas semanais e aumentando faturamento em 30-80% com nossas automa√ß√µes.\n\nQuer saber como isso funciona na pr√°tica?"
            },
            "business_presentations": {
                "saude": {
                    "title": "VitaFlow: Seu Agente Complementar no Cuidado",
                    "presentation": "Incr√≠vel! Trabalho com v√°rios m√©dicos e dentistas que transformaram completamente suas pr√°ticas.\n\nO VitaFlow n√£o √© s√≥ um sistema - √© seu agente complementar no cuidado. Enquanto voc√™ foca no que ama (cuidar dos pacientes), ele cuida de tudo mais:\n\n‚Ä¢ 5 atendentes virtuais trabalhando 24/7\n‚Ä¢ Economia de 20-30 horas semanais\n‚Ä¢ Economia de R$ 8.000-15.000/m√™s\n‚Ä¢ +40% em agendamentos\n\nCase Real: Dr. [Nome] tinha 60% da agenda vazia. Hoje tem lista de espera e faturou 85% mais no √∫ltimo trimestre.",
                    "data": "Segundo pesquisa da SBIS (Sociedade Brasileira de Inform√°tica em Sa√∫de):\n- 73% dos m√©dicos gastam +15h/semana com tarefas administrativas\n- 68% perdem pacientes por demora no retorno\n- Cl√≠nicas com automa√ß√£o t√™m 45% mais efici√™ncia operacional"
                },
                "comercio": {
                    "title": "Cr√¢nios Business: Seu Vendedor Incans√°vel",
                    "presentation": "Fant√°stico! Nossos clientes do com√©rcio est√£o tendo resultados impressionantes.\n\nImagina ter 5 vendedores trabalhando 24/7 sem sal√°rio, sem f√©rias, sem reclama√ß√£o:\n\n‚Ä¢ Vendas autom√°ticas\n‚Ä¢ WhatsApp Business automatizado\n‚Ä¢ Marketing personalizado\n‚Ä¢ Controle total\n\nCase Real: Pet Shop [Nome] aumentou vendas em 180% em 6 meses. Antes vendia R$ 25K/m√™s, hoje vende R$ 70K/m√™s.",
                    "data": "Pesquisa do Sebrae 2024:\n- 67% dos pequenos neg√≥cios perdem vendas por atendimento lento\n- Empresas com automa√ß√£o vendem 65% mais\n- 89% dos consumidores preferem resposta imediata"
                },
                "servicos": {
                    "title": "Cr√¢nios Pro: Seu Assistente Pessoal",
                    "presentation": "Perfeito! Profissionais liberais s√£o os que mais se beneficiam das nossas solu√ß√µes.\n\n√â como ter um assistente pessoal 24/7 que nunca tira f√©rias:\n\n‚Ä¢ Capta√ß√£o autom√°tica\n‚Ä¢ Processos automatizados\n‚Ä¢ Agenda otimizada\n‚Ä¢ Cobran√ßa autom√°tica\n\nCase Real: Advogado [Nome] dobrou a carteira de clientes em 4 meses sem contratar ningu√©m.",
                    "data": "Estudo da FGV sobre Profissionais Liberais:\n- 78% gastam mais tempo com administra√ß√£o que core business\n- 45% perdem clientes por falta de follow-up\n- Quem automatiza ganha 60% mais"
                },
                "imobiliaria": {
                    "title": "Cr√¢niosImobi: Revolu√ß√£o no Atendimento",
                    "presentation": "Excelente! O mercado imobili√°rio de Aracaju est√° precisando MUITO disso.\n\nVoc√™ sabe que o atendimento das imobili√°rias aqui √© p√©ssimo, n√©? Demora, n√£o retorna, cliente fica perdido...\n\nImagina ser a √öNICA imobili√°ria que:\n\n‚Ä¢ Responde na hora - 24/7\n‚Ä¢ Qualifica leads automaticamente\n‚Ä¢ Acompanha todo o processo\n‚Ä¢ Fecha mais neg√≥cios\n\nOportunidade √önica: Enquanto a concorr√™ncia dorme, voc√™ domina o mercado.",
                    "data": "Pesquisa que fizemos em Aracaju:\n- 89% dos clientes reclamam da demora no retorno\n- 67% desistem por falta de acompanhamento\n- Quem responde r√°pido fecha 3x mais"
                }
            },
            "objection_handling": {
                "tempo": {
                    "objection": "N√£o tenho tempo para isso agora",
                    "response": "Entendo perfeitamente! E √© EXATAMENTE por isso que voc√™ precisa disso URGENTE!\n\nOlha s√≥: voc√™ est√° me dizendo que n√£o tem tempo, certo?\n\nNossos clientes economizam 20-30 horas por semana. S√£o 80-120 horas por m√™s. S√£o 960-1440 horas por ano!\n\n√â como se voc√™ ganhasse 6-9 meses extras no ano para fazer o que quiser.\n\nO [Nome do Cliente] me disse: 'Ana, eu recuperei minha vida. Agora tenho tempo para ser pai, marido, e ainda cresci 70% no neg√≥cio.'\n\nS√£o 15 minutinhos de conversa que podem te devolver centenas de horas.\n\nN√£o vale o investimento?"
                },
                "preco": {
                    "objection": "Est√° caro",
                    "response": "√ìtima pergunta! Vou te mostrar uma conta que vai te surpreender:\n\nCen√°rio Atual (sem automa√ß√£o):\n- Voc√™ gasta 20h/semana com tarefas repetitivas\n- Seu tempo vale R$ 100/hora (sendo conservador)\n- S√£o R$ 2.000/semana = R$ 8.000/m√™s perdidos\n\nCen√°rio com Cr√¢nios:\n- Investimento: R$ 597/m√™s\n- Economia: R$ 8.000/m√™s\n- Lucro l√≠quido: R$ 7.403/m√™s\n\nSem contar que voc√™ ainda vai vender mais, atender melhor, e ter qualidade de vida.\n\nO [Nome] calculou que o ROI dele foi de 1.340% no primeiro ano.\n\nA pergunta n√£o √© se est√° caro... √© se voc√™ pode continuar perdendo R$ 8.000/m√™s!"
                },
                "complexidade": {
                    "objection": "Deve ser muito complicado",
                    "response": "Essa √© a melhor parte!\n\nSabe configurar Netflix? Ent√£o voc√™ consegue usar o Cr√¢nios!\n\nNosso sistema foi feito pensando em pessoas ocupadas como voc√™. Tudo √© clique e pronto.\n\nO [Nome] me disse: 'Ana, meu filho de 12 anos configurou algumas coisas mais r√°pido que eu!'\n\nE olha, se por acaso voc√™ tiver alguma d√∫vida, nossa equipe faz tudo para voc√™. Voc√™ literalmente n√£o precisa mexer em nada.\n\n√â mais f√°cil que pedir comida no iFood!"
                }
            },
            "closing_techniques": {
                "direct": "Baseado em tudo que conversamos, tenho certeza absoluta que conseguimos transformar seu neg√≥cio.\n\nO [Seu Nome] √© especialista em [√°rea espec√≠fica] e j√° ajudou mais de [n√∫mero] profissionais como voc√™ a:\n- Economizar 20-30 horas semanais\n- Aumentar faturamento em 40-80%\n- Ter qualidade de vida de volta\n\nQue tal uma conversa r√°pida de 15 minutinhos com ele?\n\nEle vai te mostrar exatamente como implementar isso no seu neg√≥cio e quanto voc√™ vai economizar.\n\nQuando voc√™ tem um tempinho livre? Hoje √† tarde ou amanh√£ de manh√£?",
                "urgency": "Olha, vou ser transparente com voc√™...\n\nEstamos com a agenda lotada porque a demanda explodiu. Tem gente esperando 2 semanas para conversar.\n\nMas como voc√™ veio atrav√©s do [origem], consegui encaixar voc√™ ainda esta semana.\n\nS√£o s√≥ 15 minutinhos que podem mudar completamente seu neg√≥cio.\n\nHoje √†s 16h ou amanh√£ √†s 9h? Qual funciona melhor?",
                "social_proof": "Sabe o que mais me motiva nesse trabalho?\n\nVer a transforma√ß√£o na vida das pessoas. Semana passada recebi um √°udio do [Nome] emocionado porque conseguiu viajar com a fam√≠lia pela primeira vez em 3 anos... sem se preocupar com o neg√≥cio.\n\nO sistema estava vendendo, atendendo, e cuidando de tudo.\n\nVoc√™ merece ter essa liberdade tamb√©m.\n\nVamos agendar? 15 minutinhos que podem mudar sua vida."
            },
            "motivational_messages": [
                "E saiba: quando voc√™ junta vis√£o estrat√©gica + execu√ß√£o ousada, o que nasce √© imposs√≠vel de ignorar... e √© exatamente isso que est√° acontecendo com a Cr√¢nios.\n\nAmanh√£ seguimos com tudo.\nAt√© l√°, descanse bem ‚Äî porque a revolu√ß√£o come√ßa com quem sonha grande. üí≠üí•\nNos vemos em breve, CEO. üòéüß†"
            ]
        }
    
    def load_knowledge_base(self) -> Dict:
        """Carrega base de conhecimento por segmento"""
        return {
            "saude": {
                "vitaflow_features": [
                    "Agendamento autom√°tico 24/7",
                    "Confirma√ß√£o de consultas via WhatsApp",
                    "Lembretes autom√°ticos",
                    "Triagem inicial de pacientes",
                    "Integra√ß√£o com prontu√°rio eletr√¥nico",
                    "Relat√≥rios de performance",
                    "Dashboard em tempo real"
                ],
                "benefits": [
                    "Redu√ß√£o de 60% no no-show",
                    "Aumento de 40% na ocupa√ß√£o da agenda",
                    "Economia de 20-30 horas semanais",
                    "Melhoria na satisfa√ß√£o do paciente",
                    "Redu√ß√£o de custos operacionais"
                ]
            },
            "comercio": {
                "features": [
                    "Cat√°logo digital automatizado",
                    "Vendas via WhatsApp",
                    "Controle de estoque",
                    "Programa de fidelidade",
                    "Marketing segmentado",
                    "Relat√≥rios de vendas",
                    "Integra√ß√£o com delivery"
                ],
                "benefits": [
                    "Aumento de 50-180% nas vendas",
                    "Redu√ß√£o de 70% no tempo de atendimento",
                    "Melhoria na experi√™ncia do cliente",
                    "Controle total do neg√≥cio",
                    "Vendas 24/7 automatizadas"
                ]
            }
        }
    
    def load_persuasion_techniques(self) -> Dict:
        """Carrega t√©cnicas de persuas√£o"""
        return {
            "spin_selling": {
                "situation": "Me conta rapidinho... qual √© sua √°rea de atua√ß√£o e quantas pessoas trabalham com voc√™?",
                "problem": "Hoje, onde voc√™ sente que mais perde tempo ou dinheiro? Atendimento? Controle? Vendas? Clientes que somem?",
                "implication": "E se isso continuar assim por mais 3 meses? O que voc√™ acha que vai acontecer com seu crescimento?",
                "need": "Imagina ter isso resolvido sem contratar ningu√©m, sem perder o controle e ainda podendo respirar com calma no fim do dia. Faz sentido pra voc√™?"
            },
            "storytelling": {
                "template": "Tem uma coisa que eu sempre digo aqui: Tecnologia √© s√≥ ferramenta. O que a gente vende √© liberdade.\n\nUm cliente nosso, o [Nome], estava exausto, perdendo leads, sem tempo nem pra almo√ßar. A gente implementou a automa√ß√£o e, em 7 dias, ele estava fechando vendas enquanto dormia ‚Äî e jantando com a esposa todos os dias.\n\nIsso te faria diferen√ßa?"
            },
            "mental_triggers": [
                "autoridade",
                "escassez", 
                "reciprocidade",
                "prova_social",
                "antecipacao",
                "compromisso_coerencia"
            ]
        }
    
    async def process_message(self, ai_request: AIRequest) -> AIResponse:
        """Processa mensagem principal"""
        try:
            # Processa m√≠dia se presente
            if ai_request.media_type != "text" and ai_request.media_data:
                media_content = await self.process_media(ai_request.media_type, ai_request.media_data)
                ai_request.message += f"\n\n[Conte√∫do da m√≠dia: {media_content}]"
            
            # Analisa inten√ß√£o e entidades
            intent_analysis = await self.analyze_intent(ai_request.message, ai_request.context)
            
            # Gera resposta baseada na inten√ß√£o
            response_text = await self.generate_response(ai_request, intent_analysis)
            
            # Gera √°udio se necess√°rio
            audio_response = None
            if ai_request.context.get("audio_enabled", False):
                audio_response = await self.generate_audio_response(response_text)
            
            # Salva intera√ß√£o no Supabase
            await self.save_interaction(ai_request, response_text, intent_analysis)
            
            return AIResponse(
                text_response=response_text,
                audio_response=audio_response,
                confidence_score=intent_analysis.get("confidence", 0.8),
                intent=intent_analysis.get("intent", "general"),
                entities=intent_analysis.get("entities", {}),
                next_action=intent_analysis.get("next_action", "continue"),
                requires_human=intent_analysis.get("requires_human", False)
            )
            
        except Exception as e:
            logger.error(f"Erro ao processar mensagem: {e}")
            return AIResponse(
                text_response="Desculpe, ocorreu um erro. Pode repetir sua mensagem?",
                confidence_score=0.0,
                intent="error"
            )
    
    async def process_media(self, media_type: str, media_data: bytes) -> str:
        """Processa diferentes tipos de m√≠dia"""
        try:
            if media_type == "audio":
                return await self.process_audio(media_data)
            elif media_type == "image":
                return await self.process_image(media_data)
            elif media_type == "video":
                return await self.process_video(media_data)
            else:
                return "Tipo de m√≠dia n√£o suportado"
                
        except Exception as e:
            logger.error(f"Erro ao processar m√≠dia {media_type}: {e}")
            return f"Erro ao processar {media_type}"
    
    async def process_audio(self, audio_data: bytes) -> str:
        """Processa √°udio e converte para texto"""
        try:
            # Salva √°udio temporariamente
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_file_path = temp_file.name
            
            # Reconhece fala
            with sr.AudioFile(temp_file_path) as source:
                audio = self.speech_recognizer.record(source)
                text = self.speech_recognizer.recognize_google(audio, language="pt-BR")
            
            # Remove arquivo tempor√°rio
            os.unlink(temp_file_path)
            
            return text
            
        except Exception as e:
            logger.error(f"Erro ao processar √°udio: {e}")
            return "N√£o consegui entender o √°udio"
    
    async def process_image(self, image_data: bytes) -> str:
        """Processa imagem e extrai informa√ß√µes"""
        try:
            # Carrega imagem
            image = Image.open(BytesIO(image_data))
            
            # Converte para an√°lise
            image_array = np.array(image)
            
            # An√°lise b√°sica da imagem
            height, width = image_array.shape[:2]
            
            # Aqui voc√™ pode integrar com servi√ßos de vis√£o computacional
            # Por exemplo, Google Vision API, AWS Rekognition, etc.
            
            return f"Imagem recebida: {width}x{height} pixels. Analisando conte√∫do..."
            
        except Exception as e:
            logger.error(f"Erro ao processar imagem: {e}")
            return "Erro ao analisar imagem"
    
    async def process_video(self, video_data: bytes) -> str:
        """Processa v√≠deo e extrai informa√ß√µes"""
        try:
            # Salva v√≠deo temporariamente
            with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_file:
                temp_file.write(video_data)
                temp_file_path = temp_file.name
            
            # Abre v√≠deo
            cap = cv2.VideoCapture(temp_file_path)
            
            # Extrai informa√ß√µes b√°sicas
            fps = cap.get(cv2.CAP_PROP_FPS)
            frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
            duration = frame_count / fps if fps > 0 else 0
            
            cap.release()
            os.unlink(temp_file_path)
            
            return f"V√≠deo recebido: {duration:.1f} segundos, {frame_count} frames. Analisando conte√∫do..."
            
        except Exception as e:
            logger.error(f"Erro ao processar v√≠deo: {e}")
            return "Erro ao analisar v√≠deo"
    
    async def analyze_intent(self, message: str, context: Dict) -> Dict:
        """Analisa inten√ß√£o da mensagem"""
        try:
            # Palavras-chave para diferentes inten√ß√µes
            intent_keywords = {
                "interesse_compra": ["quero", "preciso", "comprar", "contratar", "investir"],
                "solicitar_proposta": ["proposta", "or√ßamento", "pre√ßo", "valor", "investimento"],
                "agendar_reuniao": ["agendar", "reuni√£o", "conversar", "apresenta√ß√£o"],
                "objecao_preco": ["caro", "barato", "pre√ßo", "valor", "investimento"],
                "objecao_tempo": ["tempo", "ocupado", "corrido", "pressa"],
                "objecao_complexidade": ["dif√≠cil", "complicado", "complexo", "simples"],
                "duvida_tecnica": ["como", "funciona", "t√©cnico", "integra√ß√£o"],
                "despedida": ["tchau", "obrigado", "at√©", "depois"]
            }
            
            message_lower = message.lower()
            detected_intents = []
            
            for intent, keywords in intent_keywords.items():
                if any(keyword in message_lower for keyword in keywords):
                    detected_intents.append(intent)
            
            # Determina inten√ß√£o principal
            main_intent = detected_intents[0] if detected_intents else "general"
            
            # Extrai entidades (nomes, n√∫meros, etc.)
            entities = self.extract_entities(message)
            
            # Determina pr√≥xima a√ß√£o
            next_action = self.determine_next_action(main_intent, context)
            
            return {
                "intent": main_intent,
                "confidence": 0.8 if detected_intents else 0.5,
                "entities": entities,
                "next_action": next_action,
                "requires_human": main_intent in ["objecao_complexa", "reclamacao"]
            }
            
        except Exception as e:
            logger.error(f"Erro na an√°lise de inten√ß√£o: {e}")
            return {"intent": "general", "confidence": 0.5}
    
    def extract_entities(self, message: str) -> Dict:
        """Extrai entidades da mensagem"""
        entities = {}
        
        # Extrai n√∫meros
        import re
        numbers = re.findall(r'\d+', message)
        if numbers:
            entities["numbers"] = numbers
        
        # Extrai nomes pr√≥prios (simplificado)
        words = message.split()
        proper_nouns = [word for word in words if word.istitle()]
        if proper_nouns:
            entities["names"] = proper_nouns
        
        return entities
    
    def determine_next_action(self, intent: str, context: Dict) -> str:
        """Determina pr√≥xima a√ß√£o baseada na inten√ß√£o"""
        action_map = {
            "interesse_compra": "present_solution",
            "solicitar_proposta": "generate_proposal",
            "agendar_reuniao": "schedule_meeting",
            "objecao_preco": "handle_price_objection",
            "objecao_tempo": "handle_time_objection",
            "objecao_complexidade": "handle_complexity_objection",
            "duvida_tecnica": "provide_technical_info",
            "despedida": "close_conversation"
        }
        
        return action_map.get(intent, "continue")
    
    async def generate_response(self, ai_request: AIRequest, intent_analysis: Dict) -> str:
        """Gera resposta baseada na an√°lise"""
        try:
            intent = intent_analysis.get("intent", "general")
            business_type = ai_request.business_type.lower()
            
            # Resposta baseada na inten√ß√£o
            if intent == "interesse_compra":
                return self.get_business_presentation(business_type)
            elif intent == "solicitar_proposta":
                return await self.generate_proposal_response(ai_request.lead_data)
            elif intent == "agendar_reuniao":
                return self.get_scheduling_response()
            elif intent.startswith("objecao_"):
                objection_type = intent.replace("objecao_", "")
                return self.get_objection_response(objection_type)
            else:
                return await self.generate_contextual_response(ai_request, intent_analysis)
                
        except Exception as e:
            logger.error(f"Erro ao gerar resposta: {e}")
            return "Desculpe, pode repetir sua pergunta?"
    
    def get_business_presentation(self, business_type: str) -> str:
        """Retorna apresenta√ß√£o espec√≠fica do neg√≥cio"""
        presentations = self.ana_script["business_presentations"]
        
        if business_type in presentations:
            presentation = presentations[business_type]
            return f"{presentation['presentation']}\n\n{presentation['data']}"
        else:
            return "Nossos clientes est√£o tendo resultados incr√≠veis com nossas automa√ß√µes. Quer saber como isso pode funcionar no seu neg√≥cio?"
    
    async def generate_proposal_response(self, lead_data: Dict) -> str:
        """Gera resposta para solicita√ß√£o de proposta"""
        return """Perfeito! Vou preparar uma proposta personalizada para voc√™.

Com base no que conversamos, vou incluir:

‚úÖ Automa√ß√£o completa do atendimento
‚úÖ Integra√ß√£o com WhatsApp Business
‚úÖ Dashboard em tempo real
‚úÖ Relat√≥rios personalizados
‚úÖ Suporte t√©cnico completo

Vou enviar por email em at√© 2 horas.

Mas que tal uma conversa r√°pida de 15 minutos para eu te mostrar o sistema funcionando na pr√°tica?

Hoje √†s 16h ou amanh√£ √†s 9h?"""
    
    def get_scheduling_response(self) -> str:
        """Retorna resposta para agendamento"""
        return self.ana_script["closing_techniques"]["direct"]
    
    def get_objection_response(self, objection_type: str) -> str:
        """Retorna resposta para obje√ß√µes"""
        objections = self.ana_script["objection_handling"]
        
        if objection_type in objections:
            return objections[objection_type]["response"]
        else:
            return "Entendo sua preocupa√ß√£o. Que tal conversarmos sobre isso? Posso esclarecer todas suas d√∫vidas."
    
    async def generate_contextual_response(self, ai_request: AIRequest, intent_analysis: Dict) -> str:
        """Gera resposta contextual usando Arcee.ai"""
        try:
            # Prepara contexto para a IA
            context_prompt = self.build_context_prompt(ai_request, intent_analysis)
            
            # Chama Arcee.ai
            response = await self.call_arcee_ai(context_prompt)
            
            return response
            
        except Exception as e:
            logger.error(f"Erro ao gerar resposta contextual: {e}")
            return "Interessante! Me conta mais sobre isso. Como posso te ajudar especificamente?"
    
    def build_context_prompt(self, ai_request: AIRequest, intent_analysis: Dict) -> str:
        """Constr√≥i prompt contextual para a IA"""
        prompt = f"""
Voc√™ √© a Ana, assistente virtual da Cr√¢nios. Sua personalidade √© profissional, emp√°tica e persuasiva.

Contexto da conversa:
- Tipo de neg√≥cio: {ai_request.business_type}
- Inten√ß√£o detectada: {intent_analysis.get('intent')}
- Mensagem do cliente: {ai_request.message}

Hist√≥rico da conversa:
{json.dumps(ai_request.conversation_history, indent=2) if ai_request.conversation_history else 'Primeira intera√ß√£o'}

Dados do lead:
{json.dumps(ai_request.lead_data, indent=2) if ai_request.lead_data else 'N√£o coletados ainda'}

Instru√ß√µes:
1. Responda como a Ana, mantendo o tom profissional e persuasivo
2. Use t√©cnicas de vendas quando apropriado
3. Sempre direcione para o fechamento ou agendamento
4. Seja emp√°tica e entenda as necessidades do cliente
5. Use dados e cases de sucesso quando relevante
6. Mantenha respostas concisas mas impactantes

Resposta:
"""
        return prompt
    
    async def call_arcee_ai(self, prompt: str) -> str:
        """Chama API do Arcee.ai"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "model": "arcee-agent",
                    "messages": [
                        {"role": "system", "content": "Voc√™ √© a Ana, assistente virtual especialista em vendas da Cr√¢nios."},
                        {"role": "user", "content": prompt}
                    ],
                    "max_tokens": 500,
                    "temperature": 0.7
                }
                
                async with session.post(
                    f"{self.arcee_base_url}/chat/completions",
                    headers=self.arcee_headers,
                    json=payload
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result["choices"][0]["message"]["content"]
                    else:
                        logger.error(f"Erro na API Arcee.ai: {response.status}")
                        return "Desculpe, estou com dificuldades t√©cnicas. Pode repetir?"
                        
        except Exception as e:
            logger.error(f"Erro ao chamar Arcee.ai: {e}")
            return "Interessante! Me conta mais sobre isso."
    
    async def generate_audio_response(self, text: str) -> bytes:
        """Gera resposta em √°udio"""
        try:
            # Salva √°udio temporariamente
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                temp_file_path = temp_file.name
            
            # Gera √°udio
            self.tts_engine.save_to_file(text, temp_file_path)
            self.tts_engine.runAndWait()
            
            # L√™ arquivo gerado
            with open(temp_file_path, 'rb') as f:
                audio_data = f.read()
            
            # Remove arquivo tempor√°rio
            os.unlink(temp_file_path)
            
            return audio_data
            
        except Exception as e:
            logger.error(f"Erro ao gerar √°udio: {e}")
            return b""
    
    async def save_interaction(self, ai_request: AIRequest, response: str, intent_analysis: Dict):
        """Salva intera√ß√£o no Supabase"""
        try:
            interaction_data = {
                "phone": ai_request.context.get("phone", ""),
                "message": ai_request.message,
                "response": response,
                "intent": intent_analysis.get("intent"),
                "confidence": intent_analysis.get("confidence"),
                "business_type": ai_request.business_type,
                "media_type": ai_request.media_type,
                "created_at": datetime.now().isoformat()
            }
            
            self.supabase.table('ai_interactions').insert(interaction_data).execute()
            
        except Exception as e:
            logger.error(f"Erro ao salvar intera√ß√£o: {e}")
    
    async def generate_personalized_response(self, lead_data: Dict, challenge: str, knowledge: Dict) -> str:
        """Gera resposta personalizada baseada nos dados do lead"""
        try:
            business_type = lead_data.get("business_type", "").lower()
            
            # Busca apresenta√ß√£o espec√≠fica
            if business_type in self.ana_script["business_presentations"]:
                presentation = self.ana_script["business_presentations"][business_type]
                
                response = f"üéØ {presentation['title']}\n\n"
                response += f"{presentation['presentation']}\n\n"
                response += f"üìä {presentation['data']}\n\n"
                
                # Adiciona call-to-action
                response += "Quer ver como isso funciona na pr√°tica?\n\n"
                response += "Posso te mostrar o sistema funcionando em 15 minutinhos.\n\n"
                response += "Hoje √† tarde ou amanh√£ de manh√£?"
                
                return response
            else:
                return self.get_generic_presentation()
                
        except Exception as e:
            logger.error(f"Erro ao gerar resposta personalizada: {e}")
            return self.get_generic_presentation()
    
    def get_generic_presentation(self) -> str:
        """Retorna apresenta√ß√£o gen√©rica"""
        return """üöÄ Que incr√≠vel!

Nossos clientes est√£o tendo resultados impressionantes:

‚úÖ Economia de 20-30 horas semanais
‚úÖ Aumento de 40-80% no faturamento  
‚úÖ Atendimento 24/7 automatizado
‚úÖ Qualidade de vida de volta

Um cliente me disse: "Ana, pela primeira vez em anos consegui jantar com a fam√≠lia todos os dias!"

Isso n√£o tem pre√ßo, n√©?

Quer ver como isso funciona na pr√°tica?

15 minutinhos que podem mudar seu neg√≥cio.

Hoje √† tarde ou amanh√£ de manh√£? üéØ"""

# Fun√ß√£o para criar inst√¢ncia do AI Processor
def create_ai_processor(arcee_api_key: str, supabase_client: Client) -> AIProcessor:
    """Cria inst√¢ncia do AI Processor"""
    return AIProcessor(arcee_api_key, supabase_client)

